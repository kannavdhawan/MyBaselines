{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.017652,
     "end_time": "2020-12-25T22:22:09.077733",
     "exception": false,
     "start_time": "2020-12-25T22:22:09.060081",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:09.111490Z",
     "iopub.status.busy": "2020-12-25T22:22:09.110471Z",
     "iopub.status.idle": "2020-12-25T22:22:16.132000Z",
     "shell.execute_reply": "2020-12-25T22:22:16.131153Z"
    },
    "papermill": {
     "duration": 7.039479,
     "end_time": "2020-12-25T22:22:16.132131",
     "exception": false,
     "start_time": "2020-12-25T22:22:09.092652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import random\n",
    "import pickle\n",
    "import math\n",
    "import os\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error\n",
    "from tensorflow.keras.models import Sequential, load_model\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "tf.random.set_seed(1337)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.172945Z",
     "iopub.status.busy": "2020-12-25T22:22:16.172186Z",
     "iopub.status.idle": "2020-12-25T22:22:16.214007Z",
     "shell.execute_reply": "2020-12-25T22:22:16.214573Z"
    },
    "papermill": {
     "duration": 0.067171,
     "end_time": "2020-12-25T22:22:16.214719",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.147548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close/Last</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>07/08/20</td>\n",
       "      <td>$381.37</td>\n",
       "      <td>29272970</td>\n",
       "      <td>376.72</td>\n",
       "      <td>381.50</td>\n",
       "      <td>376.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>07/07/20</td>\n",
       "      <td>$372.69</td>\n",
       "      <td>28106110</td>\n",
       "      <td>375.41</td>\n",
       "      <td>378.62</td>\n",
       "      <td>372.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>07/06/20</td>\n",
       "      <td>$373.85</td>\n",
       "      <td>29663910</td>\n",
       "      <td>370.00</td>\n",
       "      <td>375.78</td>\n",
       "      <td>369.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>07/02/20</td>\n",
       "      <td>$364.11</td>\n",
       "      <td>28510370</td>\n",
       "      <td>367.85</td>\n",
       "      <td>370.47</td>\n",
       "      <td>363.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>07/01/20</td>\n",
       "      <td>$364.11</td>\n",
       "      <td>27684310</td>\n",
       "      <td>365.12</td>\n",
       "      <td>367.36</td>\n",
       "      <td>363.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>07/15/2015</td>\n",
       "      <td>$126.82</td>\n",
       "      <td>33559770</td>\n",
       "      <td>125.72</td>\n",
       "      <td>127.15</td>\n",
       "      <td>125.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>07/14/2015</td>\n",
       "      <td>$125.61</td>\n",
       "      <td>31695870</td>\n",
       "      <td>126.04</td>\n",
       "      <td>126.37</td>\n",
       "      <td>125.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>07/13/2015</td>\n",
       "      <td>$125.66</td>\n",
       "      <td>41365600</td>\n",
       "      <td>125.03</td>\n",
       "      <td>125.76</td>\n",
       "      <td>124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>07/10/15</td>\n",
       "      <td>$123.28</td>\n",
       "      <td>61292800</td>\n",
       "      <td>121.94</td>\n",
       "      <td>123.85</td>\n",
       "      <td>121.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>07/09/15</td>\n",
       "      <td>$120.07</td>\n",
       "      <td>78291510</td>\n",
       "      <td>123.85</td>\n",
       "      <td>124.06</td>\n",
       "      <td>119.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date  Close/Last    Volume    Open    High     Low\n",
       "0       07/08/20     $381.37  29272970  376.72  381.50  376.36\n",
       "1       07/07/20     $372.69  28106110  375.41  378.62  372.23\n",
       "2       07/06/20     $373.85  29663910  370.00  375.78  369.87\n",
       "3       07/02/20     $364.11  28510370  367.85  370.47  363.64\n",
       "4       07/01/20     $364.11  27684310  365.12  367.36  363.91\n",
       "...          ...         ...       ...     ...     ...     ...\n",
       "1254  07/15/2015     $126.82  33559770  125.72  127.15  125.58\n",
       "1255  07/14/2015     $125.61  31695870  126.04  126.37  125.04\n",
       "1256  07/13/2015     $125.66  41365600  125.03  125.76  124.32\n",
       "1257    07/10/15     $123.28  61292800  121.94  123.85  121.21\n",
       "1258    07/09/15     $120.07  78291510  123.85  124.06  119.22\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('../input/stocks/q2_dataset.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.251339Z",
     "iopub.status.busy": "2020-12-25T22:22:16.250199Z",
     "iopub.status.idle": "2020-12-25T22:22:16.257988Z",
     "shell.execute_reply": "2020-12-25T22:22:16.258495Z"
    },
    "papermill": {
     "duration": 0.027992,
     "end_time": "2020-12-25T22:22:16.258648",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.230656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([' Close/Last'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.294849Z",
     "iopub.status.busy": "2020-12-25T22:22:16.293740Z",
     "iopub.status.idle": "2020-12-25T22:22:16.311073Z",
     "shell.execute_reply": "2020-12-25T22:22:16.310588Z"
    },
    "papermill": {
     "duration": 0.036615,
     "end_time": "2020-12-25T22:22:16.311179",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.274564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>07/08/20</td>\n",
       "      <td>29272970</td>\n",
       "      <td>376.72</td>\n",
       "      <td>381.50</td>\n",
       "      <td>376.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>07/07/20</td>\n",
       "      <td>28106110</td>\n",
       "      <td>375.41</td>\n",
       "      <td>378.62</td>\n",
       "      <td>372.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>07/06/20</td>\n",
       "      <td>29663910</td>\n",
       "      <td>370.00</td>\n",
       "      <td>375.78</td>\n",
       "      <td>369.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>07/02/20</td>\n",
       "      <td>28510370</td>\n",
       "      <td>367.85</td>\n",
       "      <td>370.47</td>\n",
       "      <td>363.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>07/01/20</td>\n",
       "      <td>27684310</td>\n",
       "      <td>365.12</td>\n",
       "      <td>367.36</td>\n",
       "      <td>363.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>07/15/2015</td>\n",
       "      <td>33559770</td>\n",
       "      <td>125.72</td>\n",
       "      <td>127.15</td>\n",
       "      <td>125.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>07/14/2015</td>\n",
       "      <td>31695870</td>\n",
       "      <td>126.04</td>\n",
       "      <td>126.37</td>\n",
       "      <td>125.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>07/13/2015</td>\n",
       "      <td>41365600</td>\n",
       "      <td>125.03</td>\n",
       "      <td>125.76</td>\n",
       "      <td>124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>07/10/15</td>\n",
       "      <td>61292800</td>\n",
       "      <td>121.94</td>\n",
       "      <td>123.85</td>\n",
       "      <td>121.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>07/09/15</td>\n",
       "      <td>78291510</td>\n",
       "      <td>123.85</td>\n",
       "      <td>124.06</td>\n",
       "      <td>119.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date    Volume    Open    High     Low\n",
       "0       07/08/20  29272970  376.72  381.50  376.36\n",
       "1       07/07/20  28106110  375.41  378.62  372.23\n",
       "2       07/06/20  29663910  370.00  375.78  369.87\n",
       "3       07/02/20  28510370  367.85  370.47  363.64\n",
       "4       07/01/20  27684310  365.12  367.36  363.91\n",
       "...          ...       ...     ...     ...     ...\n",
       "1254  07/15/2015  33559770  125.72  127.15  125.58\n",
       "1255  07/14/2015  31695870  126.04  126.37  125.04\n",
       "1256  07/13/2015  41365600  125.03  125.76  124.32\n",
       "1257    07/10/15  61292800  121.94  123.85  121.21\n",
       "1258    07/09/15  78291510  123.85  124.06  119.22\n",
       "\n",
       "[1259 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.379247Z",
     "iopub.status.busy": "2020-12-25T22:22:16.373947Z",
     "iopub.status.idle": "2020-12-25T22:22:16.413315Z",
     "shell.execute_reply": "2020-12-25T22:22:16.412794Z"
    },
    "papermill": {
     "duration": 0.085681,
     "end_time": "2020-12-25T22:22:16.413461",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.327780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-07-08</td>\n",
       "      <td>29272970</td>\n",
       "      <td>376.72</td>\n",
       "      <td>381.50</td>\n",
       "      <td>376.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-07-07</td>\n",
       "      <td>28106110</td>\n",
       "      <td>375.41</td>\n",
       "      <td>378.62</td>\n",
       "      <td>372.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-07-06</td>\n",
       "      <td>29663910</td>\n",
       "      <td>370.00</td>\n",
       "      <td>375.78</td>\n",
       "      <td>369.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-07-02</td>\n",
       "      <td>28510370</td>\n",
       "      <td>367.85</td>\n",
       "      <td>370.47</td>\n",
       "      <td>363.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>27684310</td>\n",
       "      <td>365.12</td>\n",
       "      <td>367.36</td>\n",
       "      <td>363.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>2015-07-15</td>\n",
       "      <td>33559770</td>\n",
       "      <td>125.72</td>\n",
       "      <td>127.15</td>\n",
       "      <td>125.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>2015-07-14</td>\n",
       "      <td>31695870</td>\n",
       "      <td>126.04</td>\n",
       "      <td>126.37</td>\n",
       "      <td>125.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>2015-07-13</td>\n",
       "      <td>41365600</td>\n",
       "      <td>125.03</td>\n",
       "      <td>125.76</td>\n",
       "      <td>124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>2015-07-10</td>\n",
       "      <td>61292800</td>\n",
       "      <td>121.94</td>\n",
       "      <td>123.85</td>\n",
       "      <td>121.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>2015-07-09</td>\n",
       "      <td>78291510</td>\n",
       "      <td>123.85</td>\n",
       "      <td>124.06</td>\n",
       "      <td>119.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date    Volume    Open    High     Low\n",
       "0    2020-07-08  29272970  376.72  381.50  376.36\n",
       "1    2020-07-07  28106110  375.41  378.62  372.23\n",
       "2    2020-07-06  29663910  370.00  375.78  369.87\n",
       "3    2020-07-02  28510370  367.85  370.47  363.64\n",
       "4    2020-07-01  27684310  365.12  367.36  363.91\n",
       "...         ...       ...     ...     ...     ...\n",
       "1254 2015-07-15  33559770  125.72  127.15  125.58\n",
       "1255 2015-07-14  31695870  126.04  126.37  125.04\n",
       "1256 2015-07-13  41365600  125.03  125.76  124.32\n",
       "1257 2015-07-10  61292800  121.94  123.85  121.21\n",
       "1258 2015-07-09  78291510  123.85  124.06  119.22\n",
       "\n",
       "[1259 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Date']=pd.to_datetime(df['Date'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.453600Z",
     "iopub.status.busy": "2020-12-25T22:22:16.452896Z",
     "iopub.status.idle": "2020-12-25T22:22:16.472228Z",
     "shell.execute_reply": "2020-12-25T22:22:16.471576Z"
    },
    "papermill": {
     "duration": 0.04167,
     "end_time": "2020-12-25T22:22:16.472339",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.430669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>2015-07-09</td>\n",
       "      <td>78291510</td>\n",
       "      <td>123.85</td>\n",
       "      <td>124.06</td>\n",
       "      <td>119.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>2015-07-10</td>\n",
       "      <td>61292800</td>\n",
       "      <td>121.94</td>\n",
       "      <td>123.85</td>\n",
       "      <td>121.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>2015-07-13</td>\n",
       "      <td>41365600</td>\n",
       "      <td>125.03</td>\n",
       "      <td>125.76</td>\n",
       "      <td>124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>2015-07-14</td>\n",
       "      <td>31695870</td>\n",
       "      <td>126.04</td>\n",
       "      <td>126.37</td>\n",
       "      <td>125.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>2015-07-15</td>\n",
       "      <td>33559770</td>\n",
       "      <td>125.72</td>\n",
       "      <td>127.15</td>\n",
       "      <td>125.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>27684310</td>\n",
       "      <td>365.12</td>\n",
       "      <td>367.36</td>\n",
       "      <td>363.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-07-02</td>\n",
       "      <td>28510370</td>\n",
       "      <td>367.85</td>\n",
       "      <td>370.47</td>\n",
       "      <td>363.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-07-06</td>\n",
       "      <td>29663910</td>\n",
       "      <td>370.00</td>\n",
       "      <td>375.78</td>\n",
       "      <td>369.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-07-07</td>\n",
       "      <td>28106110</td>\n",
       "      <td>375.41</td>\n",
       "      <td>378.62</td>\n",
       "      <td>372.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-07-08</td>\n",
       "      <td>29272970</td>\n",
       "      <td>376.72</td>\n",
       "      <td>381.50</td>\n",
       "      <td>376.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date    Volume    Open    High     Low\n",
       "1258 2015-07-09  78291510  123.85  124.06  119.22\n",
       "1257 2015-07-10  61292800  121.94  123.85  121.21\n",
       "1256 2015-07-13  41365600  125.03  125.76  124.32\n",
       "1255 2015-07-14  31695870  126.04  126.37  125.04\n",
       "1254 2015-07-15  33559770  125.72  127.15  125.58\n",
       "...         ...       ...     ...     ...     ...\n",
       "4    2020-07-01  27684310  365.12  367.36  363.91\n",
       "3    2020-07-02  28510370  367.85  370.47  363.64\n",
       "2    2020-07-06  29663910  370.00  375.78  369.87\n",
       "1    2020-07-07  28106110  375.41  378.62  372.23\n",
       "0    2020-07-08  29272970  376.72  381.50  376.36\n",
       "\n",
       "[1259 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.sort_values('Date')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.511788Z",
     "iopub.status.busy": "2020-12-25T22:22:16.511113Z",
     "iopub.status.idle": "2020-12-25T22:22:16.528821Z",
     "shell.execute_reply": "2020-12-25T22:22:16.528199Z"
    },
    "papermill": {
     "duration": 0.038709,
     "end_time": "2020-12-25T22:22:16.528936",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.490227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-07-09</td>\n",
       "      <td>78291510</td>\n",
       "      <td>123.85</td>\n",
       "      <td>124.06</td>\n",
       "      <td>119.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-07-10</td>\n",
       "      <td>61292800</td>\n",
       "      <td>121.94</td>\n",
       "      <td>123.85</td>\n",
       "      <td>121.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-07-13</td>\n",
       "      <td>41365600</td>\n",
       "      <td>125.03</td>\n",
       "      <td>125.76</td>\n",
       "      <td>124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-07-14</td>\n",
       "      <td>31695870</td>\n",
       "      <td>126.04</td>\n",
       "      <td>126.37</td>\n",
       "      <td>125.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-07-15</td>\n",
       "      <td>33559770</td>\n",
       "      <td>125.72</td>\n",
       "      <td>127.15</td>\n",
       "      <td>125.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>27684310</td>\n",
       "      <td>365.12</td>\n",
       "      <td>367.36</td>\n",
       "      <td>363.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>2020-07-02</td>\n",
       "      <td>28510370</td>\n",
       "      <td>367.85</td>\n",
       "      <td>370.47</td>\n",
       "      <td>363.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>2020-07-06</td>\n",
       "      <td>29663910</td>\n",
       "      <td>370.00</td>\n",
       "      <td>375.78</td>\n",
       "      <td>369.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>2020-07-07</td>\n",
       "      <td>28106110</td>\n",
       "      <td>375.41</td>\n",
       "      <td>378.62</td>\n",
       "      <td>372.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>2020-07-08</td>\n",
       "      <td>29272970</td>\n",
       "      <td>376.72</td>\n",
       "      <td>381.50</td>\n",
       "      <td>376.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date    Volume    Open    High     Low\n",
       "0    2015-07-09  78291510  123.85  124.06  119.22\n",
       "1    2015-07-10  61292800  121.94  123.85  121.21\n",
       "2    2015-07-13  41365600  125.03  125.76  124.32\n",
       "3    2015-07-14  31695870  126.04  126.37  125.04\n",
       "4    2015-07-15  33559770  125.72  127.15  125.58\n",
       "...         ...       ...     ...     ...     ...\n",
       "1254 2020-07-01  27684310  365.12  367.36  363.91\n",
       "1255 2020-07-02  28510370  367.85  370.47  363.64\n",
       "1256 2020-07-06  29663910  370.00  375.78  369.87\n",
       "1257 2020-07-07  28106110  375.41  378.62  372.23\n",
       "1258 2020-07-08  29272970  376.72  381.50  376.36\n",
       "\n",
       "[1259 rows x 5 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.reset_index(drop=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.571241Z",
     "iopub.status.busy": "2020-12-25T22:22:16.570497Z",
     "iopub.status.idle": "2020-12-25T22:22:16.577028Z",
     "shell.execute_reply": "2020-12-25T22:22:16.577553Z"
    },
    "papermill": {
     "duration": 0.029862,
     "end_time": "2020-12-25T22:22:16.577704",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.547842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.829151e+07, 1.238500e+02, 1.240600e+02, 1.192200e+02],\n",
       "       [6.129280e+07, 1.219400e+02, 1.238500e+02, 1.212100e+02],\n",
       "       [4.136560e+07, 1.250300e+02, 1.257600e+02, 1.243200e+02],\n",
       "       ...,\n",
       "       [2.966391e+07, 3.700000e+02, 3.757800e+02, 3.698700e+02],\n",
       "       [2.810611e+07, 3.754100e+02, 3.786200e+02, 3.722300e+02],\n",
       "       [2.927297e+07, 3.767200e+02, 3.815000e+02, 3.763600e+02]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.iloc[:,1:].values.astype('float32')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.619422Z",
     "iopub.status.busy": "2020-12-25T22:22:16.618803Z",
     "iopub.status.idle": "2020-12-25T22:22:16.623867Z",
     "shell.execute_reply": "2020-12-25T22:22:16.624390Z"
    },
    "papermill": {
     "duration": 0.027492,
     "end_time": "2020-12-25T22:22:16.624554",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.597062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1259, 4)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.667213Z",
     "iopub.status.busy": "2020-12-25T22:22:16.666567Z",
     "iopub.status.idle": "2020-12-25T22:22:16.675395Z",
     "shell.execute_reply": "2020-12-25T22:22:16.675934Z"
    },
    "papermill": {
     "duration": 0.031971,
     "end_time": "2020-12-25T22:22:16.676075",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.644104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature generation\n",
    "\n",
    "def feature_gen(data_values,size):\n",
    "    \"\"\"\n",
    "    Generates the features for lstm with the required window size for time series input. \n",
    "    Args:\n",
    "        data_values(np array)\n",
    "        size(int)\n",
    "    Arguments:\n",
    "        data_values(np array): numpy array\n",
    "        size(int): window size\n",
    "    \n",
    "    Returns: \n",
    "        features(list): [1256, 3, 4]\n",
    "        targets(list): [1256]\n",
    "    \"\"\"\n",
    "    print(\"Feature generation..\")\n",
    "    features=[]\n",
    "    targets=[]\n",
    "    old_days=size\n",
    "    for current_day in range(old_days,len(data_values)):\n",
    "        features.append(data_values[current_day-old_days:current_day,:])  #[1259*(3,4)shape]\n",
    "        targets.append(data_values[current_day][1])\n",
    "\n",
    "    print(\"type(features):\",type(features))           #list\n",
    "    print(\"type(features[0])\",type(features[0]))      #numpy array\n",
    "    print(\"shape check features: \",np.asarray(features).shape) # (1256, 3, 4)\n",
    "    print(\"shape check target: \",np.asarray(targets).shape)    # (1256,)\n",
    "    return features,targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.719156Z",
     "iopub.status.busy": "2020-12-25T22:22:16.718482Z",
     "iopub.status.idle": "2020-12-25T22:22:16.733370Z",
     "shell.execute_reply": "2020-12-25T22:22:16.733930Z"
    },
    "papermill": {
     "duration": 0.038327,
     "end_time": "2020-12-25T22:22:16.734075",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.695748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def split(features,targets):\n",
    "    \"\"\"\n",
    "    splits the data and stores in a csv.\n",
    "    \n",
    "    Args:\n",
    "        features(list)\n",
    "        targets(list)\n",
    "    \n",
    "    Attributes:\n",
    "        features(list): list generated by the feature_gen having shape [1256,3,4]. list of numpy arrays of shape (3,4).\n",
    "        targets(list): list having 1256 elements\n",
    "    Returns: \n",
    "        Saves the csv files in data/ directory for tarin and test data with labels.\n",
    "    \"\"\"\n",
    "    print(\"Splitting..\")\n",
    "\n",
    "    # shuffling the dataset\n",
    "    zipped_f_t=list(zip(features,targets))\n",
    "#     print(zipped_f_t)\n",
    "    print(len(zipped_f_t))\n",
    "    random.shuffle(zipped_f_t)                           #shuffling the zipped object with features and labels\n",
    "    tr_sz=int(0.70*len(zipped_f_t))                      # getting size for splitting the dataset into train and test\n",
    "    train,test = zipped_f_t[:tr_sz], zipped_f_t[tr_sz:]  # splitting the zipped object list\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    ** train,test : list of truple of numpy array of shape (None,3,4) and int target.\n",
    "    ** This preprocessing is done to store the data in a csv file ..\n",
    "    \n",
    "        * Each feature set below is a tuple with features of shape (3,4)\n",
    "            and an int value for target at first index.\n",
    "        * we flatten the features at 0th index from shae (3,4) to 12 for each element/input. \n",
    "        \n",
    "    \"\"\"\n",
    "    X_train=pd.DataFrame([feature_set[0].ravel() for feature_set in train])\n",
    "    X_test=pd.DataFrame([feature_set[0].ravel() for feature_set in test])\n",
    "    y_train=pd.DataFrame([feature_set[1] for feature_set in train])\n",
    "    y_test=pd.DataFrame([feature_set[1] for feature_set in test])\n",
    "\n",
    "    print((X_train).head(2))\n",
    "    print((X_test).head(2))\n",
    "    print((y_train).head(2))\n",
    "    print((y_test).head(2))\n",
    "    print((X_train).shape)\n",
    "    print((X_test).shape)\n",
    "    # Creating dataframes \n",
    "\n",
    "    train=X_train.copy()        \n",
    "    train['Target']=y_train     # concatinating labels\n",
    "    \n",
    "    test=X_test.copy()\n",
    "    test['Target']=y_test       # concatinating labels\n",
    "\n",
    "    # print(train.head(3))\n",
    "    # print(test.head(3))\n",
    "\n",
    "    train.to_csv(os.path.join(\"train_data_RNN.csv\")) # saving csv of train and test in data/\n",
    "    test.to_csv(os.path.join(\"test_data_RNN.csv\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.777832Z",
     "iopub.status.busy": "2020-12-25T22:22:16.777163Z",
     "iopub.status.idle": "2020-12-25T22:22:16.782557Z",
     "shell.execute_reply": "2020-12-25T22:22:16.783081Z"
    },
    "papermill": {
     "duration": 0.028763,
     "end_time": "2020-12-25T22:22:16.783227",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.754464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def data_load(data_path):\n",
    "    \"\"\"\n",
    "    Loading preprocessed dataset \n",
    "    \"\"\"\n",
    "    print(\"Loading dataset..\")\n",
    "    dataset=pd.read_csv(data_path,index_col=[0])\n",
    "    X,y=dataset.iloc[:,:-1],dataset['Target']       #separating data and labels\n",
    "    return X,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.826616Z",
     "iopub.status.busy": "2020-12-25T22:22:16.825929Z",
     "iopub.status.idle": "2020-12-25T22:22:16.836870Z",
     "shell.execute_reply": "2020-12-25T22:22:16.836205Z"
    },
    "papermill": {
     "duration": 0.033802,
     "end_time": "2020-12-25T22:22:16.836992",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.803190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def normalize(X_train,y_train):\n",
    "    \"\"\"\n",
    "    Normalizing the dataset using Minmaxscalar and saving the objects in a pickle file for saving the mean and stand dev. \n",
    "    Reshapes the dataset into time series of (879,3,4)to be fed to lstm.\n",
    "    \n",
    "    Args:\n",
    "        X_train(dataframe)\n",
    "        y_train(dataframe)\n",
    "    Attributes:\n",
    "        X_train(dataframe): Dataframe containing train features\n",
    "        y_train(dataframe): Series containing train labels\n",
    "    Returns: \n",
    "        X_train: Reshaped time series numpy array of shape (879,3,4) readyto be fed into our RNN.\n",
    "        y_train: 2- dimensional numpy array with shape (879,1)\n",
    "    \"\"\"\n",
    "    print(\"Normalizing..\")\n",
    "    #scaling \n",
    "    scalar=[]\n",
    "    X_train_scalar=MinMaxScaler(feature_range=(0,1))    #setting the range between 0 and 1. scalar for features.\n",
    "    y_train_scalar=MinMaxScaler(feature_range=(0,1))    # scalar ob for label\n",
    "\n",
    "    X_train=X_train_scalar.fit_transform(X_train)       # Fitting the ob with train features\n",
    "    y_train=y_train_scalar.fit_transform(np.asarray(y_train).reshape(-1,1)) # To make it 2D, reshaping ..\n",
    "\n",
    "    scalar.extend([X_train_scalar,y_train_scalar])      # serialized objects to be saved in pkl file\n",
    "    pickle.dump(scalar,open(os.path.join(\"scalar.pkl\"), \"wb\" ))   # writing pickle file\n",
    "    \n",
    "    X_train=np.asarray(X_train).reshape(X_train.shape[0],3,4)    #Reshaping the dataset X_train to 3 dimensional numpy array for lstm\n",
    "   \n",
    "    # print(\"X_train shape: \",X_train.shape)\n",
    "    # print(\"y train shape:\",y_train.shape)\n",
    "    return X_train,y_train,X_train_scalar,y_train_scalar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.879696Z",
     "iopub.status.busy": "2020-12-25T22:22:16.879097Z",
     "iopub.status.idle": "2020-12-25T22:22:16.891864Z",
     "shell.execute_reply": "2020-12-25T22:22:16.891290Z"
    },
    "papermill": {
     "duration": 0.034891,
     "end_time": "2020-12-25T22:22:16.891993",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.857102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def LSTM_RNN(add_dense_32,add_dense_20,add_dense_10,opt,base=True):\n",
    "    \"\"\"LSTM Model odel Architecture\n",
    "    Agrs:\n",
    "        add_dense_32(bool)\n",
    "        add_dense_20(bool)\n",
    "        add_dense_10(bool)\n",
    "        opt(str)\n",
    "    Arguments:\n",
    "        add_dense_32(bool): If True, adding a dense layer with 32 units after 2 hidden layers.\n",
    "        add_dense_20(bool): If True, adding a dense layer with 20 units.\n",
    "        add_dense_10(bool): If True, adding a dense layer with 10 units.\n",
    "        opt(str): A string with optimizer name.\n",
    "    Returns: \n",
    "        model(ob): compiled model \n",
    "    \"\"\"\n",
    "    print(\"Training..\")\n",
    "\n",
    "    if base:\n",
    "\n",
    "        model = Sequential()\n",
    "        model.add(LSTM(64, input_shape=(3,4)))\n",
    "        # model.add(LSTM(units=32))\n",
    "        # model.add(Dense(10))\n",
    "        model.add(Dense(1))\n",
    "        model.compile(loss='mean_squared_error', optimizer='adam',metrics=['mae'])\n",
    "    else:\n",
    "        model= Sequential()\n",
    "\n",
    "        model.add(LSTM(units=32, return_sequences= True, input_shape=(3,4)))  # Hidden lstm layer with 32 units.\n",
    "\n",
    "        model.add(LSTM(units=10, return_sequences= False))                    # Hidden lstm layer with 10 units.\n",
    "\n",
    "\n",
    "        if add_dense_32:        \n",
    "            model.add(Dense(units=32))                                        # A fully connected dense layer with 32 units\n",
    "        \n",
    "        if add_dense_20:\n",
    "            model.add(Dense(units=20))                                        # A fully connected dense layer with 20 units\n",
    "        \n",
    "        if add_dense_10:\n",
    "            model.add(Dense(units=10))                                        # A fully connected dense layer with 10 units\n",
    "\n",
    "        model.add(Dense(units=1))                                             # output fully connected dense layer with 1 unit.\n",
    "        model.compile(loss='mean_squared_error', optimizer=opt,metrics=['mae'])     # metrics as mse, opt as sdg and adam during calls, loss as mse.\n",
    "        \n",
    "    print(model.summary())                                                # printing model summary\n",
    "        \n",
    "        # plot_model(model, to_file='data/mlp_base.png', show_shapes=True, show_layer_names=True)\n",
    "    return model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.935151Z",
     "iopub.status.busy": "2020-12-25T22:22:16.934441Z",
     "iopub.status.idle": "2020-12-25T22:22:16.940651Z",
     "shell.execute_reply": "2020-12-25T22:22:16.941180Z"
    },
    "papermill": {
     "duration": 0.029382,
     "end_time": "2020-12-25T22:22:16.941322",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.911940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def metric_errors(real,pred,flag):\n",
    "    \"\"\" calculate root mean squared error, MSE and MAE.\n",
    "    \"\"\"\n",
    "    rmse= math.sqrt(mean_squared_error(real,pred))\n",
    "    print(flag+\" RMSE :\",rmse)\n",
    "\n",
    "    mse= mean_squared_error(real,pred)\n",
    "    print(flag+' MSE : ',mse)\n",
    "\n",
    "    mae=mean_absolute_error(real,pred)\n",
    "    print(flag+' MAE : ',mae)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:16.985138Z",
     "iopub.status.busy": "2020-12-25T22:22:16.984482Z",
     "iopub.status.idle": "2020-12-25T22:22:42.618814Z",
     "shell.execute_reply": "2020-12-25T22:22:42.619385Z"
    },
    "papermill": {
     "duration": 25.657881,
     "end_time": "2020-12-25T22:22:42.619624",
     "exception": false,
     "start_time": "2020-12-25T22:22:16.961743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature generation..\n",
      "type(features): <class 'list'>\n",
      "type(features[0]) <class 'numpy.ndarray'>\n",
      "shape check features:  (1256, 3, 4)\n",
      "shape check target:  (1256,)\n",
      "Splitting..\n",
      "1256\n",
      "           0           1           2           3           4           5   \\\n",
      "0  39494768.0  220.419998  222.880005  216.839996  30280450.0  221.160004   \n",
      "1  24110330.0  143.020004  143.500000  142.410004  18527000.0  142.899994   \n",
      "\n",
      "           6           7           8           9           10          11  \n",
      "0  221.830002  217.270004  28802550.0  218.929993  222.990005  216.759995  \n",
      "1  144.750000  142.899994  21080580.0  144.110001  145.949997  143.369995  \n",
      "           0           1           2       3           4           5   \\\n",
      "0  31890740.0   97.320000   98.480003   96.75  29373050.0   97.820000   \n",
      "1  23751690.0  173.160004  174.300003  173.00  18653380.0  174.589996   \n",
      "\n",
      "           6           7           8           9           10          11  \n",
      "0   98.410004   97.029999  31251870.0   96.449997   97.750000   96.070000  \n",
      "1  175.490005  174.490005  25302200.0  176.179993  177.360001  175.649994  \n",
      "            0\n",
      "0  222.300003\n",
      "1  144.729996\n",
      "            0\n",
      "0   96.620003\n",
      "1  177.899994\n",
      "(879, 12)\n",
      "(377, 12)\n",
      "Loading dataset..\n",
      "Normalizing..\n",
      "Training..\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm (LSTM)                  (None, 64)                17664     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1)                 65        \n",
      "=================================================================\n",
      "Total params: 17,729\n",
      "Trainable params: 17,729\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n",
      "Epoch 1/100\n",
      "88/88 - 0s - loss: 0.0236 - mae: 0.0922\n",
      "Epoch 2/100\n",
      "88/88 - 0s - loss: 3.7323e-04 - mae: 0.0142\n",
      "Epoch 3/100\n",
      "88/88 - 0s - loss: 3.0867e-04 - mae: 0.0128\n",
      "Epoch 4/100\n",
      "88/88 - 0s - loss: 2.8021e-04 - mae: 0.0118\n",
      "Epoch 5/100\n",
      "88/88 - 0s - loss: 2.3284e-04 - mae: 0.0105\n",
      "Epoch 6/100\n",
      "88/88 - 0s - loss: 2.2216e-04 - mae: 0.0097\n",
      "Epoch 7/100\n",
      "88/88 - 0s - loss: 2.1456e-04 - mae: 0.0096\n",
      "Epoch 8/100\n",
      "88/88 - 0s - loss: 2.2234e-04 - mae: 0.0098\n",
      "Epoch 9/100\n",
      "88/88 - 0s - loss: 2.0736e-04 - mae: 0.0094\n",
      "Epoch 10/100\n",
      "88/88 - 0s - loss: 2.1333e-04 - mae: 0.0093\n",
      "Epoch 11/100\n",
      "88/88 - 0s - loss: 2.0003e-04 - mae: 0.0091\n",
      "Epoch 12/100\n",
      "88/88 - 0s - loss: 1.9652e-04 - mae: 0.0090\n",
      "Epoch 13/100\n",
      "88/88 - 0s - loss: 2.2139e-04 - mae: 0.0096\n",
      "Epoch 14/100\n",
      "88/88 - 0s - loss: 2.0832e-04 - mae: 0.0093\n",
      "Epoch 15/100\n",
      "88/88 - 0s - loss: 2.0696e-04 - mae: 0.0095\n",
      "Epoch 16/100\n",
      "88/88 - 0s - loss: 1.9782e-04 - mae: 0.0089\n",
      "Epoch 17/100\n",
      "88/88 - 0s - loss: 2.0276e-04 - mae: 0.0095\n",
      "Epoch 18/100\n",
      "88/88 - 0s - loss: 2.5718e-04 - mae: 0.0109\n",
      "Epoch 19/100\n",
      "88/88 - 0s - loss: 2.1200e-04 - mae: 0.0092\n",
      "Epoch 20/100\n",
      "88/88 - 0s - loss: 1.9061e-04 - mae: 0.0089\n",
      "Epoch 21/100\n",
      "88/88 - 0s - loss: 1.8867e-04 - mae: 0.0088\n",
      "Epoch 22/100\n",
      "88/88 - 0s - loss: 1.9919e-04 - mae: 0.0093\n",
      "Epoch 23/100\n",
      "88/88 - 0s - loss: 1.9284e-04 - mae: 0.0091\n",
      "Epoch 24/100\n",
      "88/88 - 0s - loss: 2.1018e-04 - mae: 0.0093\n",
      "Epoch 25/100\n",
      "88/88 - 0s - loss: 1.9043e-04 - mae: 0.0090\n",
      "Epoch 26/100\n",
      "88/88 - 0s - loss: 2.1712e-04 - mae: 0.0097\n",
      "Epoch 27/100\n",
      "88/88 - 0s - loss: 1.8477e-04 - mae: 0.0091\n",
      "Epoch 28/100\n",
      "88/88 - 0s - loss: 1.8742e-04 - mae: 0.0089\n",
      "Epoch 29/100\n",
      "88/88 - 0s - loss: 1.9142e-04 - mae: 0.0092\n",
      "Epoch 30/100\n",
      "88/88 - 0s - loss: 2.1520e-04 - mae: 0.0102\n",
      "Epoch 31/100\n",
      "88/88 - 0s - loss: 1.9122e-04 - mae: 0.0089\n",
      "Epoch 32/100\n",
      "88/88 - 0s - loss: 1.7500e-04 - mae: 0.0085\n",
      "Epoch 33/100\n",
      "88/88 - 0s - loss: 1.8559e-04 - mae: 0.0091\n",
      "Epoch 34/100\n",
      "88/88 - 0s - loss: 2.0147e-04 - mae: 0.0095\n",
      "Epoch 35/100\n",
      "88/88 - 0s - loss: 1.8566e-04 - mae: 0.0091\n",
      "Epoch 36/100\n",
      "88/88 - 0s - loss: 1.7407e-04 - mae: 0.0084\n",
      "Epoch 37/100\n",
      "88/88 - 0s - loss: 1.9287e-04 - mae: 0.0091\n",
      "Epoch 38/100\n",
      "88/88 - 0s - loss: 2.1699e-04 - mae: 0.0098\n",
      "Epoch 39/100\n",
      "88/88 - 0s - loss: 1.7359e-04 - mae: 0.0085\n",
      "Epoch 40/100\n",
      "88/88 - 0s - loss: 1.8952e-04 - mae: 0.0090\n",
      "Epoch 41/100\n",
      "88/88 - 0s - loss: 1.6902e-04 - mae: 0.0086\n",
      "Epoch 42/100\n",
      "88/88 - 0s - loss: 1.5676e-04 - mae: 0.0080\n",
      "Epoch 43/100\n",
      "88/88 - 0s - loss: 1.5625e-04 - mae: 0.0079\n",
      "Epoch 44/100\n",
      "88/88 - 0s - loss: 1.7164e-04 - mae: 0.0086\n",
      "Epoch 45/100\n",
      "88/88 - 0s - loss: 1.5094e-04 - mae: 0.0080\n",
      "Epoch 46/100\n",
      "88/88 - 0s - loss: 1.6356e-04 - mae: 0.0082\n",
      "Epoch 47/100\n",
      "88/88 - 0s - loss: 1.5258e-04 - mae: 0.0080\n",
      "Epoch 48/100\n",
      "88/88 - 0s - loss: 1.7466e-04 - mae: 0.0087\n",
      "Epoch 49/100\n",
      "88/88 - 0s - loss: 1.8298e-04 - mae: 0.0092\n",
      "Epoch 50/100\n",
      "88/88 - 0s - loss: 1.6899e-04 - mae: 0.0086\n",
      "Epoch 51/100\n",
      "88/88 - 0s - loss: 1.5483e-04 - mae: 0.0079\n",
      "Epoch 52/100\n",
      "88/88 - 0s - loss: 1.5735e-04 - mae: 0.0082\n",
      "Epoch 53/100\n",
      "88/88 - 0s - loss: 1.6822e-04 - mae: 0.0085\n",
      "Epoch 54/100\n",
      "88/88 - 0s - loss: 1.6192e-04 - mae: 0.0086\n",
      "Epoch 55/100\n",
      "88/88 - 0s - loss: 1.4436e-04 - mae: 0.0078\n",
      "Epoch 56/100\n",
      "88/88 - 0s - loss: 1.4826e-04 - mae: 0.0081\n",
      "Epoch 57/100\n",
      "88/88 - 0s - loss: 1.5100e-04 - mae: 0.0080\n",
      "Epoch 58/100\n",
      "88/88 - 0s - loss: 1.4878e-04 - mae: 0.0080\n",
      "Epoch 59/100\n",
      "88/88 - 0s - loss: 1.3850e-04 - mae: 0.0078\n",
      "Epoch 60/100\n",
      "88/88 - 0s - loss: 1.4378e-04 - mae: 0.0081\n",
      "Epoch 61/100\n",
      "88/88 - 0s - loss: 2.0831e-04 - mae: 0.0097\n",
      "Epoch 62/100\n",
      "88/88 - 0s - loss: 1.3436e-04 - mae: 0.0075\n",
      "Epoch 63/100\n",
      "88/88 - 0s - loss: 1.2995e-04 - mae: 0.0072\n",
      "Epoch 64/100\n",
      "88/88 - 0s - loss: 1.3938e-04 - mae: 0.0078\n",
      "Epoch 65/100\n",
      "88/88 - 0s - loss: 1.2937e-04 - mae: 0.0075\n",
      "Epoch 66/100\n",
      "88/88 - 0s - loss: 1.3807e-04 - mae: 0.0076\n",
      "Epoch 67/100\n",
      "88/88 - 0s - loss: 1.2566e-04 - mae: 0.0072\n",
      "Epoch 68/100\n",
      "88/88 - 0s - loss: 1.2216e-04 - mae: 0.0072\n",
      "Epoch 69/100\n",
      "88/88 - 0s - loss: 1.2143e-04 - mae: 0.0070\n",
      "Epoch 70/100\n",
      "88/88 - 0s - loss: 1.3249e-04 - mae: 0.0077\n",
      "Epoch 71/100\n",
      "88/88 - 0s - loss: 1.1630e-04 - mae: 0.0069\n",
      "Epoch 72/100\n",
      "88/88 - 0s - loss: 1.2986e-04 - mae: 0.0077\n",
      "Epoch 73/100\n",
      "88/88 - 0s - loss: 1.2190e-04 - mae: 0.0070\n",
      "Epoch 74/100\n",
      "88/88 - 0s - loss: 1.1035e-04 - mae: 0.0069\n",
      "Epoch 75/100\n",
      "88/88 - 0s - loss: 1.2155e-04 - mae: 0.0070\n",
      "Epoch 76/100\n",
      "88/88 - 0s - loss: 1.1314e-04 - mae: 0.0070\n",
      "Epoch 77/100\n",
      "88/88 - 0s - loss: 1.0678e-04 - mae: 0.0068\n",
      "Epoch 78/100\n",
      "88/88 - 0s - loss: 1.2178e-04 - mae: 0.0073\n",
      "Epoch 79/100\n",
      "88/88 - 0s - loss: 1.1411e-04 - mae: 0.0070\n",
      "Epoch 80/100\n",
      "88/88 - 0s - loss: 1.0448e-04 - mae: 0.0066\n",
      "Epoch 81/100\n",
      "88/88 - 0s - loss: 1.0025e-04 - mae: 0.0063\n",
      "Epoch 82/100\n",
      "88/88 - 0s - loss: 1.0262e-04 - mae: 0.0063\n",
      "Epoch 83/100\n",
      "88/88 - 0s - loss: 9.8145e-05 - mae: 0.0063\n",
      "Epoch 84/100\n",
      "88/88 - 0s - loss: 1.0827e-04 - mae: 0.0069\n",
      "Epoch 85/100\n",
      "88/88 - 0s - loss: 1.0492e-04 - mae: 0.0071\n",
      "Epoch 86/100\n",
      "88/88 - 0s - loss: 1.1036e-04 - mae: 0.0067\n",
      "Epoch 87/100\n",
      "88/88 - 0s - loss: 1.0234e-04 - mae: 0.0065\n",
      "Epoch 88/100\n",
      "88/88 - 0s - loss: 1.0367e-04 - mae: 0.0066\n",
      "Epoch 89/100\n",
      "88/88 - 0s - loss: 1.0635e-04 - mae: 0.0066\n",
      "Epoch 90/100\n",
      "88/88 - 0s - loss: 1.0780e-04 - mae: 0.0066\n",
      "Epoch 91/100\n",
      "88/88 - 0s - loss: 9.2123e-05 - mae: 0.0061\n",
      "Epoch 92/100\n",
      "88/88 - 0s - loss: 1.0082e-04 - mae: 0.0064\n",
      "Epoch 93/100\n",
      "88/88 - 0s - loss: 1.0484e-04 - mae: 0.0066\n",
      "Epoch 94/100\n",
      "88/88 - 0s - loss: 1.2124e-04 - mae: 0.0075\n",
      "Epoch 95/100\n",
      "88/88 - 0s - loss: 1.0356e-04 - mae: 0.0065\n",
      "Epoch 96/100\n",
      "88/88 - 0s - loss: 1.0837e-04 - mae: 0.0068\n",
      "Epoch 97/100\n",
      "88/88 - 0s - loss: 1.1699e-04 - mae: 0.0071\n",
      "Epoch 98/100\n",
      "88/88 - 0s - loss: 1.1947e-04 - mae: 0.0073\n",
      "Epoch 99/100\n",
      "88/88 - 0s - loss: 9.7443e-05 - mae: 0.0062\n",
      "Epoch 100/100\n",
      "88/88 - 0s - loss: 9.8176e-05 - mae: 0.0065\n",
      "28/28 [==============================] - 0s 1ms/step - loss: 8.6536e-05 - mae: 0.0057\n",
      "\n",
      "\n",
      "Loss and MAE on Train set:  [8.653612894704565e-05, 0.005663387943059206]\n",
      "\n",
      "\n",
      "Random Testing for Training data \n",
      "\n",
      "Predicted:  [220.53363]\n",
      "Target:  [222.30000305]\n",
      "\n",
      "\n",
      "Different Losses after inverting the prices to real scale for Train Data: \n",
      "\n",
      "Train RMSE : 2.6402300292677503\n",
      "Train MSE :  6.970814607447186\n",
      "Train MAE :  1.607382538918071\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\": \n",
    "\n",
    "\n",
    "    win_size=3\n",
    "    features,targets=feature_gen(df,win_size)                    # Generating features\n",
    "\n",
    "\n",
    "    split(features,targets)                                                 # Preprocessing and saving preprocessed dataset\n",
    "\n",
    "\n",
    "    \n",
    "    X_train,y_train=data_load(os.path.join(\"./train_data_RNN.csv\"))\n",
    "\n",
    "    # Normalizing the train dataset and reshaping.\n",
    "    X_train,y_train,X_train_scalar,y_train_scalar=normalize(X_train,y_train)\n",
    "\n",
    "    # Training.. \n",
    "                    #Best model is uncommented..\n",
    "    model=LSTM_RNN(add_dense_32=False,add_dense_20=False,add_dense_10=False,opt='adam',base=True)           #Architecture-1 \n",
    "        \n",
    "    # model=LSTM_RNN(add_dense_32=False,add_dense_20=False,add_dense_10=False,opt='adam',base=False)        #Architecture-2\n",
    "    # model=LSTM_RNN(add_dense_32=False,add_dense_20=False,add_dense_10=False,opt='sgd',base=False)         #Architecture-3\n",
    "    # model=LSTM_RNN(add_dense_32=True,add_dense_20=False,add_dense_10=False,opt='adam',base=False)         #Architecture-4\n",
    "    # model=LSTM_RNN(add_dense_32=True,add_dense_20=True,add_dense_10=False,opt='adam',base=False)          #Architecture-5\n",
    "\n",
    "    # model=LSTM_RNN(add_dense_32=True,add_dense_20=True,add_dense_10=True,opt='adam',base=False)           #Architecture-6\n",
    "\n",
    "\n",
    "    # history=model.fit(X_train, y_train, epochs=100, batch_size=50, verbose=2)                             # on second model only   \n",
    "    # history=model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=2)                              # on second model only   \n",
    "\n",
    "    history=model.fit(X_train, y_train, epochs=100, batch_size=10, verbose=2) #Fitting the model\n",
    "\n",
    "    model.save(os.path.join(\"RNN_model.h5\"))               #Saving the fitted model\n",
    "\n",
    "\n",
    "    loss=model.evaluate(X_train,y_train)                                      #Evaluating the model on train data for overall loss.\n",
    "    print(\"\\n\\nLoss and MAE on Train set: \",loss)\n",
    "\n",
    "    y_pred_train= model.predict(X_train)                                      #To get the overall metric results while training\n",
    "\n",
    "    # print(\"y_pred_train:\",y_pred_train.shape) #np array (879,1)\n",
    "    # print(\"y_train:\", y_train.shape)          #np array (879,1)\n",
    "\n",
    "\n",
    "    y_pred_train = y_train_scalar.inverse_transform(y_pred_train)    #Inverting both y_train and y_pred_train to get real values. \n",
    "    y_train = y_train_scalar.inverse_transform(y_train) \n",
    "\n",
    "    print(\"\\n\\nRandom Testing for Training data \\n\\nPredicted: \",y_pred_train[0])\n",
    "    print(\"Target: \",y_train[0])\n",
    "\n",
    "    # MAE,MSE,RMSE from utils call for training data \n",
    "    print(\"\\n\\nDifferent Losses after inverting the prices to real scale for Train Data: \\n\")\n",
    "    metric_errors(y_train,y_pred_train,flag=\"Train\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.086466,
     "end_time": "2020-12-25T22:22:42.793282",
     "exception": false,
     "start_time": "2020-12-25T22:22:42.706816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:42.978590Z",
     "iopub.status.busy": "2020-12-25T22:22:42.977380Z",
     "iopub.status.idle": "2020-12-25T22:22:42.980780Z",
     "shell.execute_reply": "2020-12-25T22:22:42.980098Z"
    },
    "papermill": {
     "duration": 0.100558,
     "end_time": "2020-12-25T22:22:42.980918",
     "exception": false,
     "start_time": "2020-12-25T22:22:42.880360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_files(path_sc,path_test):\n",
    "    \"\"\" loading scalar object and Test csv.\n",
    "        Args:\n",
    "            path(os path)\n",
    "        Attributes:\n",
    "            path(os path): path to the pickle object and testdata\n",
    "        Returns: \n",
    "            X_test\n",
    "            y_test\n",
    "            X_scalar\n",
    "            y_scalar\n",
    "    \"\"\"\n",
    "    print(\"Loading files..\")\n",
    "    scalar=pickle.load(open(path_sc,\"rb\"))\n",
    "    X_scalar=scalar[0]\n",
    "    y_scalar=scalar[1]\n",
    "\n",
    "    X_test,y_test=data_load(path_test)      # test data loading from utils call\n",
    "\n",
    "    return X_test,y_test,X_scalar,y_scalar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:43.167545Z",
     "iopub.status.busy": "2020-12-25T22:22:43.166447Z",
     "iopub.status.idle": "2020-12-25T22:22:43.169599Z",
     "shell.execute_reply": "2020-12-25T22:22:43.168935Z"
    },
    "papermill": {
     "duration": 0.097837,
     "end_time": "2020-12-25T22:22:43.169710",
     "exception": false,
     "start_time": "2020-12-25T22:22:43.071873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_test(X_test,y_test,X_scalar,y_scalar):\n",
    "    \"\"\" \n",
    "    Scaling test data using saved scalar from train_RNN.\n",
    "    Args:\n",
    "        X_test(DataFrame)\n",
    "        y_test(DataFrame)\n",
    "        X_scalar(scalar ob)\n",
    "        y_scalar(scalar ob)\n",
    "    Attributes:\n",
    "        X_test(DataFrame): Test features\n",
    "        y_test(DataFrame): Test labels\n",
    "        X_scalar(scalar ob): Scalar having mean and sd same as train data. | for features\n",
    "        y_scalar(scalar ob): scalar for labels.\n",
    "    Returns:\n",
    "        X_test: preprocessed time series np array ready for lstm.\n",
    "        y_test: preprocessed np array having labels for test data.\n",
    "    \"\"\"\n",
    "    print(\"Preprocessing Test data..\")\n",
    "    X_test=X_scalar.transform(X_test)                           #Normalizing the data features with same mean and sd as of train data.\n",
    "    y_test=y_scalar.transform(np.asarray(y_test).reshape(-1,1)) #Normalizing the labels and reshaping into a 2-d np array.\n",
    "\n",
    "    # print(\"X_test:\\n\",X_test[0],\" shape:\",X_test.shape)         #(377,12)\n",
    "    # print(\"y_test:\\n\",y_test[0],\" Shape:\",y_test.shape)         #(377,1)\n",
    "\n",
    "    \n",
    "    X_test=np.asarray(X_test).reshape(X_test.shape[0],3,4)      #Reshaping features to the desired shape for time series RNN.\n",
    "    # print(\"Reshaped X_test: \\n\",X_test.shape)                   #(377,3,4)\n",
    "    return X_test,y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:43.353870Z",
     "iopub.status.busy": "2020-12-25T22:22:43.352778Z",
     "iopub.status.idle": "2020-12-25T22:22:43.355927Z",
     "shell.execute_reply": "2020-12-25T22:22:43.355274Z"
    },
    "papermill": {
     "duration": 0.099842,
     "end_time": "2020-12-25T22:22:43.356058",
     "exception": false,
     "start_time": "2020-12-25T22:22:43.256216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def pred(path_model,X_test,y_test,y_scalar):\n",
    "    \"\"\"\n",
    "    Loads the saved model and predicts the test labels. i.e. price for next day.\n",
    "    calculates the loss using evaluate for test data.\n",
    "    Inverse transforms the predicted and real prices\n",
    "    Args:\n",
    "        path_model(os path)\n",
    "        X_test(np array)\n",
    "        y_test(np array)\n",
    "        y_scalar(scalar ob)\n",
    "    Attributes:\n",
    "        path_model(os path): path to the h5 RNN model\n",
    "        X_test(np array): preprocessed numpy array with shape (377,3,4)\n",
    "        y_test(np array): numpy array with real price labels with shape (377,1)\n",
    "        y_scalar(scalar ob): scalar for target having mean and sd same as train data. \n",
    "    Returns: \n",
    "        y_pred: predicted values/price as np array which are inverse transformed to original scale\n",
    "        y_test: Real values/price inverse transformed \n",
    "    \"\"\"\n",
    "    print(\"Predicting and calculating loss..\")\n",
    "    lstm_model=load_model(path_model)   #loading the model     \n",
    "    y_pred=lstm_model.predict(X_test)   #predicting the price\n",
    "    # print(y_pred.shape)\n",
    "\n",
    "    loss=lstm_model.evaluate(X_test,y_test,verbose=2)\n",
    "    print(\"Loss and MAE on Test set: \",loss)\n",
    "\n",
    "    y_pred= y_scalar.inverse_transform(y_pred)  # converting back to real values \n",
    "    y_test= y_scalar.inverse_transform(y_test)  # converting real labels back to real values\n",
    "\n",
    "    print(\"Random Testing for Test data \\n Predicted: \",y_pred[0])\n",
    "    print(\"Target: \",y_test[0])\n",
    "    \n",
    "    return y_pred,y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-12-25T22:22:43.544819Z",
     "iopub.status.busy": "2020-12-25T22:22:43.542231Z",
     "iopub.status.idle": "2020-12-25T22:22:44.690469Z",
     "shell.execute_reply": "2020-12-25T22:22:44.689952Z"
    },
    "papermill": {
     "duration": 1.24752,
     "end_time": "2020-12-25T22:22:44.690583",
     "exception": false,
     "start_time": "2020-12-25T22:22:43.443063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading files..\n",
      "Loading dataset..\n",
      "Preprocessing Test data..\n",
      "Predicting and calculating loss..\n",
      "12/12 - 0s - loss: 1.7673e-04 - mean_absolute_error: 0.0074\n",
      "Loss and MAE on Test set:  [0.0001767283392837271, 0.007419070228934288]\n",
      "Random Testing for Test data \n",
      " Predicted:  [97.50594]\n",
      "Target:  [96.62000275]\n",
      "   Predicted Price  Real Price\n",
      "0       111.906105  110.800003\n",
      "1        97.760979   96.000000\n",
      "2       267.898590  268.600006\n",
      "3       183.569809  186.509995\n",
      "4       232.116043  230.779999\n",
      "5       187.527206  189.500000\n",
      "6       117.148750  115.970001\n",
      "7       340.556946  344.720001\n",
      "8       284.862091  284.690002\n",
      "9       170.705765  170.490005\n",
      "\n",
      "\n",
      "Different Losses after inverting the prices to real scale for Test Data: \n",
      "\n",
      "Test RMSE : 3.773081972019417\n",
      "Test MSE :  14.236147567577932\n",
      "Test MAE :  2.1056811992938695\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "        \n",
    "    # Loading scalar and testing csv..\n",
    "    X_test,y_test,X_scalar,y_scalar=load_files(os.path.join(\"./scalar.pkl\"),os.path.join(\"./test_data_RNN.csv\"))\n",
    "\n",
    "    # Preprocssing the test data\n",
    "    X_test,y_test=preprocess_test(X_test,y_test,X_scalar,y_scalar)\n",
    "\n",
    "    # Loading model and Predicting the price for next day using lstm for test data and calculating loss.\n",
    "    y_pred,y_test=pred(os.path.join(\"RNN_model.h5\"),X_test,y_test,y_scalar)\n",
    "\n",
    "    #printing part of predicted values\n",
    "    y_pred_df=pd.DataFrame(y_pred,columns=['Predicted Price'])\n",
    "    y_test_df=pd.DataFrame(y_test,columns=['Real Price'])\n",
    "\n",
    "    y_df=pd.concat([y_pred_df.reset_index(drop=True),y_test_df.reset_index(drop=True)],axis=1)\n",
    "    print(y_df.iloc[10:20,:].reset_index(drop=True))\n",
    "\n",
    "    # MAE,MSE,RMSE from utils call for test data \n",
    "    print(\"\\n\\nDifferent Losses after inverting the prices to real scale for Test Data: \\n\")\n",
    "    metric_errors(y_test,y_pred,flag=\"Test\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "papermill": {
   "duration": 40.531756,
   "end_time": "2020-12-25T22:22:44.886389",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2020-12-25T22:22:04.354633",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
